# -*- coding: utf-8 -*-
"""Copy of IEEE ML Submission_Showni Rudra.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EIsCUVc3ngm0SpTmA8Q6an8zhxDGSJka
"""

#load dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.fashion_mnist.load_data()
#shape dataset to have single channel
print("x_train shape:", x_train.shape, "y_train shape:", y_train.shape)

# TensorFlow and tf.keras
import tensorflow as tf
from tensorflow import keras
 
# Helper libraries
import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras import backend as K
from tensorflow.keras.models import Model, Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, Input
from tensorflow.keras.datasets import fashion_mnist
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.keras import datasets,models,layers
from keras.utils import to_categorical

class_names = ['T-shirt/top', 'ankel boot', 'bag', 'shirt', 'dress',
               'Sneaker', 'Sneaker', 'Shirt', 'T-shirt', 'Sneaker', 'ankel-boot', 'Sneaker', 'Sneaker', 'trouser' 'coat']

x_train.shape

len(y_train)

y_test

x_test.shape

len(y_test)

plt.figure()
plt.imshow(x_train[0])
plt.colorbar()
plt.grid(False)
plt.show()

x_train = x_train / 255.0
x_test = x_test / 255.0

plt.figure(figsize=(10,10))
for i in range(15):
    plt.subplot(3,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(x_train[i], cmap=plt.cm.binary)
    plt.xlabel(class_names[y_test[i]])
plt.show()

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(10)
])

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

model.fit(x_test, y_test, epochs=10)

test_loss, test_acc = model.evaluate(x_test,  y_test, verbose=2)

print('\nTest accuracy:', test_acc)

plt.plot(['test_acc'], label='accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.2, 1])
plt.ylim([0.5, 1])
plt.legend(loc='lower right')
plt.show()